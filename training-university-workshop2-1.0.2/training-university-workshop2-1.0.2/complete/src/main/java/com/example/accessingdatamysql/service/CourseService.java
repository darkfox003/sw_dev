package com.example.accessingdatamysql.service;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.accessingdatamysql.model.Course;
import com.example.accessingdatamysql.service.repo.CourseRepository;
import com.example.accessingdatamysql.service.repo.entity.CourseEntity;

@Service    
public class CourseService {

	@Autowired // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
	private CourseRepository courseRepository;

    public List<Course> findAll() {   
        Iterable<CourseEntity> iter = courseRepository.findAll();
        
        
        List<Course> ls = new ArrayList<>();    
        iter.forEach(CourseEntity -> {
            Course course = new Course();
            course.setId(CourseEntity.getId());
            course.setName(CourseEntity.getName());
            course.setCredit(CourseEntity.getCredit());
            course.setSeat(CourseEntity.getSeat());
            course.setMseat(CourseEntity.getMseat());
            ls.add(course);
        });    
        return ls;    
    }


    public Course save(Course course) {
        CourseEntity CourseEntity = new CourseEntity();
        CourseEntity.setId(course.getId());
		CourseEntity.setName(course.getName());
		CourseEntity.setCredit(course.getCredit());
		CourseEntity.setSeat(0);
        CourseEntity.setMseat(course.getMseat());                                      // 0: Expired, 1: Active (Default)
		//CourseEntity.setCredit(new Timestamp(System.currentTimeMillis()));


		CourseEntity resultCourseEntity = courseRepository.save(CourseEntity);


        Course resultCourse = new Course();
        resultCourse.setId(resultCourseEntity.getId());
        resultCourse.setName(resultCourseEntity.getName());
        resultCourse.setCredit(resultCourseEntity.getCredit());
        //resultCourse.setIsActive(1 == CourseEntity.getState());

        return resultCourse;
    }


    // public int countStudents(boolean isActive) {   
    //     Integer count = courseRepository.countStudents(isActive? 1: 0);
    //     return Optional.ofNullable(count).orElse(0);    
    // }
}
